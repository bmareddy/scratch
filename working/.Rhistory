unclass(x)
x <- factor(c("unknown", "yes", "yes", "no", "no", "no", "unknown"))
x
unclass(x)
x <- factor(c("unknown", "yes", "yes", "no", "no", "yes", "no", "unknown", "yes"))
x
y <- c("b1", "NA", "b2", NA, 3, NaN, 4.01, Nan)
y <- c("b1", "NA", "b2", NA, 3, NaN, 4.01)
is.na(y)
is.nan(y)
y
z <- c(1, NaN, 2, NA, 3)
x
z
is.na(z)
x
x <- data.frame(foo = 1:4, bar = c(T, F, T, F))
x
class(x)
is.vector(x)
attributes(x)
nrow(x)
ncol(x)
data.matrix(x)
str(file)
x <- list(1, "a", "b", T)
x
x[2]
x[[2]]
x[2][1]
x[[2]][1]
dimnames(x)
x <- 1:4
y <- 2
x+y
save.image("C:\\Users\\bmareddy\\Documents\\RLab\\working\\Week1Scratch.RData")
data <- read.csv("hw1_data.csv")
data
data[1]
data[,1]
data
class(data)
head(data, n=2
)
nrow(data)
tail(data, n=2)
data[47,]
data$Ozone
is.na(data$Ozone)
length(is.na(data$Ozone)==T)
length(data$Ozone(is.na(data$Ozone)==T))
length(data$Ozone[is.na(data$Ozone)==T])
mean(data$Ozone[is.na(data$Ozone)==F])
data[data$Ozone>31,]
ozone <- data$Ozone
class(ozone)
ozone
ozone[ozone>31]
data[T,]
data[as.logical(data$Ozone>31),]
data[!is.na(data$Ozone)]
data[!is.na(data$Ozone),]
data[!is.na(data$Ozone) & data$Ozone>31,]
data[!is.na(data$Ozone) & data$Ozone>31 & !is.na(data$Temp),]
data[!is.na(data$Ozone) & data$Ozone>31 & !is.na(data$Temp) & data$Temp>90,]
subset18 <- data[!is.na(data$Ozone) & data$Ozone>31 & !is.na(data$Temp) & data$Temp>90,]
class(subset18)
subset18$Solar.R
mean(subset18$Solar.R)
data$Temp[!is.na(data$Month) & data$Month == 6]
mean(data$Temp[!is.na(data$Month) & data$Month == 6])
data[!is.na(data$Ozone) & !is.na(data$Month) & data$Month == 5]
data[!is.na(data$Ozone) & !is.na(data$Month) & data$Month == 5,]
dataMay <- data[!is.na(data$Ozone) & !is.na(data$Month) & data$Month == 5,]
max(dataMay$Ozone)
save.image("C:\\Users\\bmareddy\\Documents\\RLab\\working\\Week1DataQuiz")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
play()
args(file.path)
?file.path
nxt()
file.path("folder1", "folder2", "mytest3.R")
info()
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursice=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1, 20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
play()
c(rep(0, times=10), rep(1, times=10), rep(2, times=10))
nxt()
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
print(my_char)
my_char
paster(my_char, collapse=" ")
paste(my_char, collapse=" ")
my_name <- c(my_char, "Bob")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
play()
LETTERS
nxt()
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:10
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrows=4, ncols=5)
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
play()
?colnames
colnames(my_data) <- cnames
nxt()
colnames(my_data) <- cnames
my_data
play()
dimnames(my_data)
?matrix
dimnames(my_data) <- c("rows", "columns")
dimnames(my_data) <- list("rows" = c(1,2,3,4), "columns" = c(cnames))
dimnames(my_data)
my_data
my_data$rows
my_data$rows[1]
my_data$rows[1,]
nxt()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!5=7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
play()
4==4.0
nxt()
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
bye()
i <- 1:10
coin <- rbinom(1,1,0.5)
coin
coin
coin
coin
?rbinom
?mean
formals(paste)
search()
fixed <- c(FALSE, FALSE)
params <- fixed
params
class(params)
params[!fixed]
params[!fixed] <- p
p = c(1,2)
params[!fixed] <- p
params
params[!fixed]
params[!ixed]
params[fixed]
x <- 1:10
if (x>5) { print(x) }
getwd()
data <- file.csv("/specdata/200.csv", col.names = c("Date", "sulfate", "nitrate"))
data <- read.csv("/specdata/200.csv", col.names = c("Date", "sulfate", "nitrate"))
file <- file.path(getwd(),"working","200.csv")
data <- read.csv(file, col.names = c("Date", "sulfate", "nitrate"))
file <- file.path(getwd(),"specdata","200.csv")
data <- read.csv(file, col.names = c("Date", "sulfate", "nitrate"))
data
nrows(data)
nrow(data)
data[1,]
ncol(data)
data <- read.csv(file)
ncol(data)
data[1,]
dimnames(data)
data[,"sulfate"]
p <- "sulfate"
data[,p]
q <- data[,p]
class(q)
length(q)
f <- numeric(0)
mean(q, na.rm = TRUE)
q <- paste(f,q)
length(q)
mean(q, na.rm = TRUE)
q
mean(q, na.rm = TRUE)
q[1]
q <- data[,p]
q[1]
q <- c(f,q)
q[1]
mean(q, na.rm = TRUE)
i<-1
file <- file.path(getwd(),paste(i,".csv",sep=""))
file
paste0("0","1")
paste0("00","1")
paste0("1")
paste("00","1")
paste0("00","1")
x <- c(numeric(0), numeric(0)
)
y <- c(1,3421)
rbind(x,y)
ls()
ok <- complete.cases(data)
class(ok)
is.vector(ok)
ok
unclass(ok)
sum(ok)
z <- rbind(x,y)
class(z)
i <- 15
j <- paste0("000",i)
substr(j, length(j)-3+1, length(j))
length(j)
substr(j, nchar(j)-3+1, nchar(j))
?cor
var(1:5)
?var
swirl()
sys.date()
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) {x[0]}, c(8,4,10))
evaluate(function(x) {x[1]}, c(8,4,10))
evaluate(function(x) {x[1]}, c(8,4,0))
evaluate(function(x) {x[length(x)]}, c(8,4,10))
evaluate(function(x) {x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("Week 2 R is almost done")
submit()
submit()
mad_libs(place="College Station", adjective="joyfully", noun="Ted Cruz")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
play()
?str
nxt()
t2$min
weekdays(d1)
months(t1)
quarters()
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M") 
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
save.image("C:\\Users\\bmareddy\\Documents\\RLab\\working\\Week2Scratch.RData")
lapply
x <- list(a=1:5, b=rnorm(10))
a
x$a
x$b
lapply(x, mean)
lapply(x, mean)
lapply(x, sd)
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
x$c
x$d
lapply(x, mean)
lapply(x, mean)
lapply(x, sd)
runif(2)
runif
lapply(x$a, runif)
lapply(x$a, runif, min=2, max=10)
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) { elt[,1] })
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
sapply(x,mena)
sapply(x,mean)
m <- matrix(rnorm(200),20,10)
dim(m)
dimnames(m)
attributes(m)
apply(m,2,mean)
as.list(apply(m,2,mean))
apply(m,1,sum)
apply(m,1,max)
m
apply(m, 1, quantile, probs=c(0.25,0.75))
3d <- rnorm(2*2*10)
d3 <- rnorm(2*2*10)
d3
attributes(d3)
class(d3)
d3 <- array(rnorm(2*2*10), c(2,2,10))
class(d3)
d3
apply(d3, c(1,2), mean)
apply(d3, c(1,2), max)
apply(d3, 3, max)
apply(d3, c(1,3), max)
mapply
mapply(rep,1:4,4:1)
mapply(rep,1:4,1:4)
mapply(rep,1:4,1:5)
mapply(rep,1:6,1:5)
x <- c(a=rnorm(10), b=runif(10), c=rnorm(10,1))
x
class(x)
is.vector(x)
attributes(x)
x$a1
x$a
gl
f <- gl(5,6)
f
tapply(x,f, mean)
tapply(x,f, max)
tapply(x,f, max, simplify = FALSE)
tapply(x,f, range)
split
split(x,f)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) { colMeans(x[,c("Ozone", "Solar.R", "Wind")]) } )
colMeans
lapply(s, function(x) { colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE) } )
sapply(s, function(x) { colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm = TRUE) } )
x <- runif(10)
x
f1 <- gl(2,5)
f1
f2 <- (5,2)
f2 <- gl(5,2)
f2
interatcion(f1,f2)
interaction(f1,f2)
split(x,list(f1,f2))
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2), drop = TRUE))
exit
quit()
